snippet errw "wrap error" b
if $1 != nil {
	$1 = errors.Wrap($1, "$2")
	return $1
}
endsnippet

snippet ierrw "wrap error" b
if $1 err := $2; err != nil {
	err = errors.Wrap(err, "$3")
	return err
}
endsnippet

snippet testcase "simple test case" b
func Test$1(t *testing.T) {
	cases := []struct {
	}{
		{
		},
	}

	for idx, c := range cases {
		out := $2
		require.Equal(t, c.expect, out, idx)
	}
}
endsnippet

snippet errg "grpc error" b
if $1 != nil {
	return status.Error(codes.$2, "failed to $3: " + $1.Error())
}
endsnippet

###############################################
# terraform azurerm provider
###############################################

snippet tfdeclres "declare resource" b
func resource$1() *pluginsdk.Resource {
	return &pluginsdk.Resource{
		Create: resource$1CreateUpdate,
		Read:   resource$1Read,
		Update: resource$1CreateUpdate,
		Delete: resource$1Delete,

		Importer: pluginsdk.ImporterValidatingResourceId(func(id string) error {
			_, err := parse.$1ID(id)
			return err
		}),

		Timeouts: &pluginsdk.ResourceTimeout{
			Create: pluginsdk.DefaultTimeout(30 * time.Minute),
			Read:   pluginsdk.DefaultTimeout(5 * time.Minute),
			Update: pluginsdk.DefaultTimeout(30 * time.Minute),
			Delete: pluginsdk.DefaultTimeout(30 * time.Minute),
		},

		Schema: map[string]*pluginsdk.Schema{
			"name": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validate.$1Name(),
			},

			"resource_group_name": azure.SchemaResourceGroupName(),

			"location": location.Schema(),

			$0

			"tags": tags.Schema(),
		},
	}
}

func resource$1CreateUpdate(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).$2.$3Client
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	name := d.Get("name").(string)
	resourceGroup := d.Get("resource_group_name").(string)
	location := azure.NormalizeLocation(d.Get("location").(string))
	id := parse.New$1ID(subscriptionId, resourceGroup, name)

	if d.IsNewResource() {
		resp, err := client.Get(ctx, resourceGroup, name)
		if err != nil {
			if !utils.ResponseWasNotFound(resp.Response) {
				return fmt.Errorf("checking for existing %s: %+v", id, err)
			}
		}

		if !utils.ResponseWasNotFound(resp.Response) {
			return tf.ImportAsExistsError("azurerm_$4", id.ID())
		}
	}

	// TODO: d.Get() && Create

	d.SetId(id.ID())

	return resource$1Read(d, meta)
}

func resource$1Read(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).$2.$3Client
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.$1ID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, id.ResourceGroup, id.$1Name)
	if err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			log.Printf("[DEBUG] %s was not found - removing from state!", id)
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving %s: %+v", id, err)
	}

	d.Set("name", id.Name)
	d.Set("resource_group_name", id.ResourceGroup)
	if location := resp.Location; location != nil {
		d.Set("location", azure.NormalizeLocation(*location))
	}
	// TODO: d.Set()

	return tags.FlattenAndSet(d, resp.Tags)
}

func resource$1Delete(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).$2.$3Client
	ctx, cancel := timeouts.ForDelete(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.$1ID(d.Id())
	if err != nil {
		return err
	}

	future, err := client.Delete(ctx, id.ResourceGroup, id.$1Name)
	if err != nil {
		return fmt.Errorf("deleting %s: %+v", id, err)
	}

	err = future.WaitForCompletionRef(ctx, client.Client)
	if err != nil {
		if response.WasNotFound(future.Response()) {
			return nil
		}
		return fmt.Errorf("waiting for deletion of %s: %+v", id, err)
	}

	return nil
}
endsnippet

snippet tfdeclds "declare data source" b
func dataSource$1() *pluginsdk.Resource {
	return &pluginsdk.Resource{
		Read: dataSource$1Read,

		Timeouts: &pluginsdk.ResourceTimeout{
			Read: pluginsdk.DefaultTimeout(5 * time.Minute),
		},

		Schema: map[string]*pluginsdk.Schema{
			"name": {
				Type:         pluginsdk.TypeString,
				Required:     true,
				ValidateFunc: validate$1Name(),
			},

			"resource_group_name": azure.SchemaResourceGroupNameForDataSource(),

			"location": azure.SchemaLocationForDataSource(),

			$0

			"tags": tags.SchemaDataSource(),
		},
	}
}

func dataSource$1Read(d *pluginsdk.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).$2.$3Client
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	name := d.Get("name").(string)
	resourceGroup := d.Get("resource_group_name").(string)
	id := parse.New$1ID(subscriptionId, resourceGroup, name)
	d.SetId(id.ID())


	resp, err := client.Get(ctx, resourceGroup, name)
	if err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			return fmt.Errorf("%s was not found", id)
		}

		return fmt.Errorf("retrieving %s: %+v", id, err)
	}

	// TODO: d.Set()

	return tags.FlattenAndSet(d, resp.Tags)
}

endsnippet

snippet tfdeclblk "declare nested block" b
"$1": {
	Type: pluginsdk.TypeList,
	MaxItems: 1,
	$2: true,
	Elem: &pluginsdk.Resource{
		Schema: map[string]*pluginsdk.Schema {
			$0
		},
	},
},
endsnippet

snippet tfctx "create context" b
client := meta.(*clients.Client).$1.$2Client
ctx, cancel := timeouts.For$3(meta.(*clients.Client).StopContext, d)
defer cancel()
endsnippet

snippet tfgetok "d.GetOk()" b
if v, ok := d.GetOk("$1"); ok {
	$0
}
endsnippet


snippet tfcallcreate "call sdk CreateOrUpdate() in sync manner" b
if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, param); err != nil {
	return fmt.Errorf("creating %s: %+v", id, err)
}
endsnippet

snippet tfcallcreate_async "call sdk CreateOrUpdate() in async manner" b
future, err := client.CreateOrUpdate(ctx, resourceGroup, name, param)
if err != nil {
	return fmt.Errorf("creating %s: %+v", id, err)
}

if err := future.WaitForCompletionRef(ctx, client.Client); err != nil {
	return fmt.Errorf("waiting for creation of %s: %+v", id, err)
}
endsnippet

snippet tfretcreate "return statement of create callback" b
return resource$1Read(d, meta)
endsnippet

snippet tfparseid "parse resource id" b
id, err := parse.$1ID(d.Id())
if err != nil {
	return err
}
endsnippet

snippet tfcallget "call sdk Get() in read callback" b
resp, err := client.Get(ctx, id.ResourceGroup, id.Name, "")
if err != nil {
	if utils.ResponseWasNotFound(resp.Response) {
		log.Printf("[DEBUG] %s was not found - removing from state!", id)
		d.SetId("")
		return nil
	}

	return fmt.Errorf("retrieving %s: %+v", id, err)
}
endsnippet

snippet tfretread "return statement of read callback" b
return tags.FlattenAdnSet(d, resp.Tags)
endsnippet

snippet tfcallupdate "call sdk Update() in sync manner" b
if _, err := client.Update(ctx, id.ResourceGroup, id.Name, param); err != nil {
	return fmt.Errorf("updateing %s: %+v", id, err)
}
endsnippet

snippet tfcallupdate_async "call sdk Update() in async manner" b
future, err := client.Update(ctx, id.ResourceGroup, id.Name, param)
if err != nil {
	return fmt.Errorf("updating %s: %+v", id, err)
}
if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
	return fmt.Errorf("waiting for update of %s: %+v", id, err)
}
endsnippet

snippet tfretupdate "return statement of update callback" b
return resource$1Read(d, meta)
endsnippet

snippet tfcalldelete_async "call sdk Delete() in async manner" b
future, err := client.Delete(ctx, id.ResourceGroup, id.Name)
if err != nil {
	return fmt.Errorf("deleting %s: %+v", id, err)
}

if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
	if !response.WasNotFound(future.Response()) {
		return fmt.Errorf("waiting for deleting %s: %+v", id, err)
	}
}
endsnippet

snippet tfcalldelete "call sdk Delete() in manner" b
if _, err := client.Delete(ctx, id.ResourceGroup, id.Name); err != nil {
	return fmt.Errorf("deleting %s: %+v", id, err)
}
endsnippet

snippet tfretdelete "return statement of delete callback" b
return nil
endsnippet

snippet tfflatten_map "define flatten function which converts sdk type into nested block (i.e. one length slice of map)" b
func flatten$1(input $2) []interface{} {
	if input == nil {
		return []interface{}{}
	}

	$0

	return []interface{}{
		map[string]interface{}{
		},
	}
}
endsnippet

snippet tfflatten_slice "define flatten function which converts pointer of slice of sdk type into slice" b
func flatten$1(input *[]$2) []interface{} {
	if input == nil {
		return []interface{}{}
	}

	output := make([]interface{}, 0)

	for _, e := range *input {
		output = append(output, $3)
	}

	return output
}
endsnippet

snippet tfexpand_map "define expand function which converts nested block to sdk type" b
func expand$1(input []interface{}) *$2 {
	if len(input) == 0 || input[0] == nil {
		return nil
	}

	raw := input[0].(map[string]interface{})
	output := &$2{
	}

	return output
}
endsnippet

snippet tfexpand_slice "define expand function which converts slice to pointer of slice of sdk type" b
func expand$1(input []interface{}) *[]$2 {
	if len(input) == 0 {
		return nil
	}

	result := make([]$2, 0)

	for _, e := range input {
		result = append(result, $3)			
	}

	return &result
}
endsnippet

snippet tfacctest_res "acc test scaffolding for resource" b
type $1Resource struct{}

func TestAcc$1_basic(t *testing.T) {
	data := acceptance.BuildTestData(t, "azurerm_$4", "test")
	r := $1Resource{}

	data.ResourceTest(t, r, []resource.TestStep{
		{
			Config: r.basic(data),
			Check: resource.ComposeTestCheckFunc(
				check.That(data.ResourceName).ExistsInAzure(r),
			),
		},
		data.ImportStep(),
	})
}

func TestAcc$1_complete(t *testing.T) {
	data := acceptance.BuildTestData(t, "azurerm_$4", "test")
	r := $1Resource{}

	data.ResourceTest(t, r, []resource.TestStep{
		{
			Config: r.complete(data),
			Check: resource.ComposeTestCheckFunc(
				check.That(data.ResourceName).ExistsInAzure(r),
			),
		},
		data.ImportStep(),
	})
}

func TestAcc$1_update(t *testing.T) {
	data := acceptance.BuildTestData(t, "azurerm_$4", "test")
	r := $1Resource{}

	data.ResourceTest(t, r, []resource.TestStep{
		{
			Config: r.basic(data),
			Check: resource.ComposeTestCheckFunc(
				check.That(data.ResourceName).ExistsInAzure(r),
			),
		},
		data.ImportStep(),
		{
			Config: r.complete(data),
			Check: resource.ComposeTestCheckFunc(
				check.That(data.ResourceName).ExistsInAzure(r),
			),
		},
		data.ImportStep(),
		{
			Config: r.basic(data),
			Check: resource.ComposeTestCheckFunc(
				check.That(data.ResourceName).ExistsInAzure(r),
			),
		},
		data.ImportStep(),
	})
}

func TestAcc$1_requiresImport(t *testing.T) {
	data := acceptance.BuildTestData(t, "azurerm_$4", "test")
	r := $1Resource{}

	data.ResourceTest(t, r, []resource.TestStep{
		{
			Config: r.basic(data),
			Check: resource.ComposeTestCheckFunc(
				check.That(data.ResourceName).ExistsInAzure(r),
			),
		},
		data.RequiresImportErrorStep(r.requiresImport),
	})
}

func (r $1Resource) Exists(ctx context.Context, clients *clients.Client, state *terraform.InstanceState) (*bool, error) {
	client := clients.$2.$3Client

	id, err := parse.$1ID(state.ID)
	if err != nil {
		return nil, err
	}

	if resp, err := client.Get(ctx, id.ResourceGroup, id.$1Name); err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			return utils.Bool(false), nil
		}
		return nil, fmt.Errorf("retrieving %s: %+v", id, err)
	}

	return utils.Bool(true), nil
}

func (r $1Resource) basic(data acceptance.TestData) string {
	template := r.template(data)
	return fmt.Sprintf(\`
%s

resource "azurerm_$4" "test" {
}
\`, template)
}

func (r $1Resource) complete(data acceptance.TestData) string {
	template := r.template(data)
	return fmt.Sprintf(\`
%s

resource "azurerm_$4" "test" {
}
\`, template)
}

func (r $1Resource) requiresImport(data acceptance.TestData) string {
	template := r.basic(data)
	return fmt.Sprintf(\`
%s

resource "azurerm_$4" "import" {
}
\`, template)
}

func (r $1Resource) template(data acceptance.TestData) string {
	return fmt.Sprintf(\`
\`)
}
endsnippet

snippet tfacctest_ds "acc test scaffolding for datasource" b
type $1DataSource struct{}

func TestAccDataSource$1_basic(t *testing.T) {
	data := acceptance.BuildTestData(t, "azurerm_$2", "test")
	d := $1DataSource{}
	r := $1Resource{}

	data.DataSourceTest(t, []resource.TestStep{
		{
			Config: d.basic(data, r),
			Check: resource.ComposeTestCheckFunc(
				check.That(data.ResourceName).Key("$3").Exists(),
			),
		},
	})
}

func (d $1DataSource) basic(data acceptance.TestData, r $1Resource) string {
	config := r.basic(data)
	return fmt.Sprintf(\`
%s

data "azurerm_$2" "test" {
  name = azurerm_$2.test.name
}
\`, config)
}
endsnippet


snippet tfvalidate_string_def "define validation function for string" b
func $1(i interface{}, k string) (warnings []string, errors []error) {
	return validation.StringMatch(regexp.MustCompile(\`$2\`), "")(i, k)
}
endsnippet

snippet tfimportor_def "define importer to for fake descriminator resources" b
func import$1(expectKind $2.$3) func(d *pluginsdk.ResourceData, meta interface{}) (data []*pluginsdk.ResourceData, err error) {
	return func(d *pluginsdk.ResourceData, meta interface{}) (data []*pluginsdk.ResourceData, err error) {
		id, err := parse.$1ID(d.Id())
		if err != nil {
			return nil, err
		}

		client := meta.(*clients.Client).$4.$5Client
		ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
		defer cancel()

		resp, err := client.Get(ctx, id.ResourceGroup, id.Name)
		if err != nil {
			return nil, fmt.Errorf("retrieving %s: %+v", id, err)
		}

		if resp.Kind != expectKind {
			return nil, fmt.Errorf(\`$6"kind" mismatch, expected "%s", got "%s"\`, expectKind, resp.Kind)
		}
		return []*pluginsdk.ResourceData{d}, nil
	}
}
endsnippet

snippet tfimportor_discriminator_def "define importer to for descriminator resources" b
func import$1(expectKind $2.$3) func(d *pluginsdk.ResourceData, meta interface{}) (data []*pluginsdk.ResourceData, err error) {
	return func(d *pluginsdk.ResourceData, meta interface{}) (data []*pluginsdk.ResourceData, err error) {
		id, err := parse.$1ID(d.Id())
		if err != nil {
			return nil, err
		}

		client := meta.(*clients.Client).$4.$5sClient
		ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
		defer cancel()

		resp, err := client.Get(ctx, id.ResourceGroup, id.Name)
		if err != nil {
			return nil, fmt.Errorf("retrieving %s: %+v", id, err)
		}

		var kind $2.$5Kind

		switch resp.Value.(type) {
		case *$2.$6
			kind = $2.$7
		}

		if expectKind != kind {
			return nil, fmt.Errorf("%s has mismatched kind, expected: %q, got %q", id, expectKind, kind)
		}

		return []*pluginsdk.ResourceData{d}, nil
	}
}
endsnippet

snippet tfresourceid "define the go generate command for resourceid"
//go:generate go run ../../tools/generator-resource-id/main.go -path=./ -name=$1 -id=/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.$2/$3
endsnippet


snippet ssa_value_cases "all value cases in switch-case" b
case *ssa.Alloc:
case *ssa.BinOp:
case *ssa.Builtin:
case *ssa.Call:
case *ssa.ChangeInterface:
case *ssa.ChangeType:
case *ssa.Const:
case *ssa.Convert:
case *ssa.Extract:
case *ssa.Field:
case *ssa.FieldAddr:
case *ssa.FreeVar:
case *ssa.Function:
case *ssa.Global:
case *ssa.Index:
case *ssa.IndexAddr:
case *ssa.Lookup:
case *ssa.MakeChan:
case *ssa.MakeClosure:
case *ssa.MakeInterface:
case *ssa.MakeMap:
case *ssa.MakeSlice:
case *ssa.Next:
case *ssa.Parameter:
case *ssa.Phi:
case *ssa.Range:
case *ssa.Select:
case *ssa.Slice:
case *ssa.TypeAssert:
case *ssa.UnOp:
endsnippet

snippet ssa_instr_cases "all instruction cases in switch-case" b
case *ssa.Alloc:
case *ssa.BinOp:
case *ssa.Call:
case *ssa.ChangeInterface:
case *ssa.ChangeType:
case *ssa.Convert:
case *ssa.DebugRef:
case *ssa.Defer:
case *ssa.Extract:
case *ssa.Field:
case *ssa.FieldAddr:
case *ssa.Go:
case *ssa.If:
case *ssa.Index:
case *ssa.IndexAddr:
case *ssa.Jump:
case *ssa.Lookup:
case *ssa.MakeChan:
case *ssa.MakeClosure:
case *ssa.MakeInterface:
case *ssa.MakeMap:
case *ssa.MakeSlice:
case *ssa.MapUpdate:
case *ssa.Next:
case *ssa.Panic:
case *ssa.Phi:
case *ssa.Range:
case *ssa.Return:
case *ssa.RunDefers:
case *ssa.Select:
case *ssa.Send:
case *ssa.Slice:
case *ssa.Store:
case *ssa.TypeAssert:
case *ssa.UnOp:
endsnippet

snippet tfdeclres_new "declare TF resource (new)"

type $1Resource struct {}

var _ sdk.ResourceWithUpdate = $1Resource{}

type $1Model struct {
	Name           string                 \`tfschema:"name"\`
	ResourceGroup  string                 \`tfschema:"resource_group_name"\`
	Tags           map[string]interface{} \`tfschema:"tags"\`
}

func (r $1Resource) Arguments() map[string]*pluginsdk.Schema {
	return map[string]*pluginsdk.Schema{
		"name": {
			Type:         pluginsdk.TypeString,
			Required:     true,
			ForceNew:     true,
			ValidateFunc: validation.$1Name,
		},
		"resource_group_name": azure.SchemaResourceGroupName(),
		"tags": tags.ForceNewSchema(),
	}
}

func (r $1Resource) Attributes() map[string]*pluginsdk.Schema {
	return map[string]*pluginsdk.Schema{}
}

func (r $1Resource) ResourceType() string {
	return "azurerm${3}"
}

func (r $1Resource) ModelObject() interface{} {
	return &$1Model{}
}

func (r $1Resource) IDValidationFunc() pluginsdk.SchemaValidateFunc {
	return validate.$1ID
}

func (r $1Resource) Create() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.$2.$1sClient
			subscriptionId := metadata.Client.Account.SubscriptionId

			var model $1Model
			if err := metadata.Decode(&model); err != nil {
				return fmt.Errorf("decoding %+v", err)
			}

			id := parse.New$1ID(subscriptionId, model.ResourceGroup, model.Name)
			existing, err := client.Get(ctx, id.ResourceGroup, id.Name)
			if err != nil {
				if !utils.ResponseWasNotFound(existing.Response) {
					return fmt.Errorf("checking for presence of existing %s: %+v", id, err)
				}
			}
			if !utils.ResponseWasNotFound(existing.Response) {
				return metadata.ResourceRequiresImport(r.ResourceType(), id)
			}

			// TODO: construct params from model

			future, err = client.CreateOrUpdate(ctx, id.ResourceGroup, id.Name, params)
			if err != nil {
				return fmt.Errorf("creating %s: %+v", id, err)
			}
			if err := future.WaitForCompletionRef(ctx, client.Client); err != nil {
				return fmt.Errorf("waiting for creation of %s: %+v", id, err)
			}
			
			metadata.SetID(id)
			return nil
		},
	}
}

func (r $1Resource) Read() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 5 * time.Minute,

		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.$2.$1sClient
			id, err := parse.$1ID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			existing, err := client.Get(ctx, id.ResourceGroup, id.Name)
			if err != nil {
				if utils.ResponseWasNotFound(existing.Response) {
					return metadata.MarkAsGone(id)
				}
				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			// TODO: construct the params
			model := $1Model{}

			model.Tags = tags.Flatten(existing.Tags)

			return metadata.Encode(&model)
		},
	}
}

func (r $1Resource) Delete() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			client := metadata.Client.$2.$1sClient

			id, err := parse.$1ID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			future, err := client.Delete(ctx, id.ResourceGroup, id.Name)
			if err != nil {
				return fmt.Errorf("deleting %s: %+v", id, err)
			}

			if err := future.WaitForCompletionRef(ctx, client.Client); err != nil {
				if !response.WasNotFound(future.Response()) {
					return fmt.Errorf("waiting for removal of %s: %+v", id, err)
				}
			}

			return nil
		},
	}
}

func (r $1Resource) Update() sdk.ResourceFunc {
	return sdk.ResourceFunc{
		Timeout: 30 * time.Minute,
		Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
			id, err := parse.$1ID(metadata.ResourceData.Id())
			if err != nil {
				return err
			}

			var state $1Model
			if err := metadata.Decode(&state); err != nil {
				return err
			}

			client := metadata.Client.$2.$1sClient

			params, err := client.Get(ctx, id.ResourceGroup, id.Name)
			if err != nil {
				return fmt.Errorf("retrieving %s: %+v", id, err)
			}

			// TODO: update the params
			// if props := params.Properties; props != nil {
			// 	if metadata.ResourceData.HasChange("xxx") {
			// 		props.Xxx = state.Xxx
			// 	}

			future, err := client.CreateOrUpdate(ctx, id.ResourceGroup, id.Name, params)
			if err != nil {
				return fmt.Errorf("updating %s: %+v", id, err)
			}
			if err := future.WaitForCompletionRef(ctx, client.Client); err != nil {
				return fmt.Errorf("waiting for update of %s: %+v", id, err)
			}

			return nil
		},
	}
}
endsnippet
